# dataset_selector.py - –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –∏ –≤—ã–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ
# –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
import tkinter as tk
from tkinter import ttk, messagebox
import json
import os

DATASET_PATH = "dataset.json"

def load_dataset_and_select(parent):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏–ª–∏ None.
    """
    if not os.path.exists(DATASET_PATH):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {DATASET_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    try:
        with open(DATASET_PATH, "r", encoding="utf-8") as f:
            dataset = json.load(f)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç:\n{e}")
        return None

    # –ï—Å–ª–∏ –¥–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç–æ–π
    if not dataset:
        messagebox.showinfo("–ü—É—Å—Ç–æ", "–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –±–ª–æ–∫–æ–≤.")
        return None

    # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞
    window = tk.Toplevel(parent)
    window.title("–í—ã–±–æ—Ä –±–ª–æ–∫–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    window.geometry("700x500")
    window.grab_set()

    selected_vars = []
    frame = tk.Frame(window)
    frame.pack(fill="both", expand=True)

    canvas = tk.Canvas(frame)
    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
    scroll_frame = tk.Frame(canvas)

    scroll_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # –ß–µ–∫–±–æ–∫—Å—ã
    for block in dataset:
        var = tk.BooleanVar(value=True)
        cb = tk.Checkbutton(scroll_frame, text=f'üìù {block["text_input"][:100]}...', variable=var, anchor="w", justify="left", wraplength=650)
        cb.pack(fill="x", padx=10, pady=5, anchor="w")
        selected_vars.append((var, block))

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    def on_confirm():
        selected_blocks = [b for v, b in selected_vars if v.get()]
        if not selected_blocks:
            messagebox.showwarning("–ù–µ—Ç –≤—ã–±–æ—Ä–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –±–ª–æ–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
            return
        window.selected_blocks = selected_blocks
        window.destroy()

    tk.Button(window, text="‚úÖ –û–±—É—á–∏—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö", command=on_confirm).pack(pady=10)

    parent.wait_window(window)
    return getattr(window, "selected_blocks", None)
