import google.generativeai as genai
from google.generativeai import GenerativeModel, GenerationConfig
import json
import os
from tkinter import messagebox

# –ï–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI-–º–æ–¥–µ–ª–∏
generation_config = GenerationConfig(
    temperature=0.5,
    max_output_tokens=2000
)

# –ó–∞–¥–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç—é–Ω–∏–Ω–≥–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏, –µ–≥–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ —Å–≤–æ—ë
custom_model_id = "new-custom-chat-assistant"

# –ï–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ AI-–º–æ–¥–µ–ª–∏
safety_settings = [
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": 3},
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": 3},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": 3},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": 4},
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –º–æ–¥–µ–ª–∏
_model_cache = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
file_path = r'C:\Temp\Special\config.json'

# –ß—Ç–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API
def configure_api():
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    with open(file_path, 'r') as file:
        config = json.load(file)

    api_key = config.get("PVY_GEMINI_API_KEY")
    if not api_key:
        raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

    genai.configure(api_key=api_key)


_model_cache = None  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à


def get_model_instance():
    global _model_cache
    if _model_cache:
        return _model_cache  # –µ—Å–ª–∏ –∫—ç—à —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –∏—â–µ–º –∑–∞–Ω–æ–≤–æ

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    target_model = "gemini-1.5-flash"

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç—é–Ω–∏–Ω–≥–æ–≤–∞–Ω–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
    preferred_id = custom_model_id
    tuned_models = genai.list_tuned_models()
    found = [m.name for m in tuned_models if m.name.endswith(preferred_id)]
    if found:
        target_model = found[0]  # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏

    # –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å system_instruction –¥–ª—è —Ç—é–Ω–∏–Ω–≥–æ–≤
    kwargs = {
        "model_name": target_model,
        "generation_config": generation_config,
        "safety_settings": safety_settings
    }
    # –í –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ç—é–Ω–Ω–∏–Ω–≥–æ–≤–∞–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å tunedModels
    if "tunedModels/" not in target_model:
        kwargs["system_instruction"] = (
            "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å—Ç—Ä–æ–≥–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö. "
            "–¢—ã –Ω–µ –∑–∞–º–µ–Ω—è–µ—à—å –≤—Ä–∞—á–∞, –∞ —è–≤–ª—è–µ—à—å—Å—è —É—á–∏—Ç–µ–ª–µ–º. "
            "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        )

    print(f"[DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {target_model}")

    _model_cache = genai.GenerativeModel(**kwargs)
    return _model_cache


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
def generate_response(query, mode="chat", chat_session=None, cot_mode=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("chat", "no_memory").
    :param chat_session: –û–±—ä–µ–∫—Ç ChatSession –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º "chat").
    :param cot_mode: –†–µ–∂–∏–º Chain-of-Thought (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç —Ç—Ä—ë—Ö –º–æ–¥–µ–ª–µ–π).
    :return: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
    """

    # –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    model = get_model_instance()

    if mode == "chat":
        # –†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ ChatSession
        if cot_mode:    # —É—á—Ç—ë–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ Chain-of-Thought
            responses = []

            for _ in range(3):
                # –ö–ª–æ–Ω–∏—Ä—É–µ–º —á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å), —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
                temp_chat = model.start_chat(history=chat_session.history if chat_session else None)
                resp = temp_chat.send_message(query)
                responses.append(resp.text)

                # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –æ—Ç–≤–µ—Ç
            selected = max(set(responses), key=responses.count)

            if not chat_session:
                chat_session = model.start_chat()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏—é
            chat_session.send_message(query)
            chat_session.send_message(selected)

            return selected, chat_session

        else:
            if not chat_session:
                chat_session = model.start_chat()
            response = chat_session.send_message(query)
            return response.text, chat_session

    elif mode == "no_memory":
        # –†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å
        response = model.generate_content(query)
        return response.text, None

    else:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")


def train_model_from_blocks(blocks):
    """
    –û–±—É—á–∞–µ—Ç –Ω–æ–≤—É—é —Ç—é–Ω–∏–Ω–≥–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö.
    :param blocks: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ "text_input" –∏ "output"
    """
    if not blocks:
        print("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        return


    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏

    existing_model = next((m for m in genai.list_tuned_models() if m.name.endswith(custom_model_id)), None)
    if existing_model:
        user_choice = messagebox.askyesno("–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏",
            f"–ú–æ–¥–µ–ª—å '{custom_model_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–£–¥–∞–ª–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ?")
        if not user_choice:
            return
        try:
            genai.delete_tuned_model(existing_model.name)
            print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {existing_model.name}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")
            return

    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        print(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(blocks)} –±–ª–æ–∫–∞—Ö...")

        batch_size = min(len(blocks), 60)

        operation = genai.create_tuned_model(
            source_model="models/gemini-1.5-flash-001-tuning",
            training_data=blocks,
            id=custom_model_id,
            display_name="–ù–æ–≤—ã–π —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            description="–ú–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ",
            temperature=0.5,
            epoch_count=3,
            batch_size=batch_size
        )
        tuned_model = operation.result()
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {tuned_model.name}")

        global _model_cache
        _model_cache = genai.GenerativeModel(
            model_name=tuned_model.name,
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        print(f"üíæ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å {tuned_model.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

         # --- –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è: —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å ---
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö:")
        test_model = genai.GenerativeModel(model_name=tuned_model.name)
        test_chat = test_model.start_chat()
        for i, example in enumerate(blocks, 1):
            question = example["text_input"]
            expected = example["output"]
            try:
                response = test_chat.send_message(question)
                actual = response.text.strip()
                match = expected.strip() in actual
                status = "‚úÖ" if match else "‚ùå"
                print(f"\n[{i}] –í–æ–ø—Ä–æ—Å: {question}")
                print(f"     üîπ –û–∂–∏–¥–∞–µ–º—ã–π: {expected}")
                print(f"     üî∏ –ü–æ–ª—É—á–µ–Ω: {actual}")
                print(f"     {status} {'–°–æ–≤–ø–∞–¥–∞–µ—Ç' if match else '–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}")
            except Exception as e:
                print(f"[{i}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")

